//This mixin add vendor prefixes to any css property
//@UseExample: @include prefix(transform, scale3d(2.5, 2, 1.5));
@mixin prefix($prop, $value) {
  -webkit-#{$prop}: #{$value};
  -moz-#{$prop}: #{$value};
  -ms-#{$prop}: #{$value};
  -o-#{$prop}: #{$value};
  #{$prop}: #{$value};
}

//Vertical centering
//@UseExample @include vertical-center();
@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

//Import font in easy way
//@UseExample font-face("My Font", my-font);
@mixin font-face($name, $file) {
  @font-face {
    font-family: "#{$name}";
    src: url("../fonts/#{$file}.eot");
    src: url("../fonts/#{$file}.eot?#iefix") format("embedded-opentype"),
    url("../fonts/#{$file}.woff") format("woff"),
    url("../fonts/#{$file}.ttf") format("truetype"),
    url("../fonts/#{$file}.svg?#webfont") format("svg");
  }
}

//Keyframe animations, You can create beautiful animations with CSS using the @keyframes rule.
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

//Retina-ready images you can serve to Apple devices with a Retina Display
//@UseExample @include retina-image("my-image2x.png", 1000px, 500px);
@mixin retina-image($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

//Absolute Position mixin allows you to quickly specify values for the four directions: top, right, bottom, and left.
//@UseExample @include abs-position(100px, 100px, auto, auto);
@mixin absolute-position ($top, $right, $bottom, $left) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

//Arrow with four optional directions
//You can choose from four directions (up, down, left, right) and set the size and color of the arrow.
//@UseExample @include arrow(up, 10px, #efefef) Or @include arrow()
@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
  @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }
  @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

//Media queries for mobile-first design
//@UseExample @include breakpoint(large) {...}
@mixin breakpoint($point) {
  @if $point == large {
    @media only screen and (min-width: 1366px) {
      @content;
    }
  }
  @else if $point == desktop {
    @media only screen and (min-width: 1024px) {
      @content;
    }
  }
  @else if $point == tablet {
    @media only screen and (min-width: 600px) {
      @content;
    }
  }
}

//Media queries, you can send key from $breakpoints map and your @content
//@UseExample @include mq('tablet-wide') { padding-top: 4rem; ...}
$breakpoints: (
        "phone":        400px,
        "phone-wide":   480px,
        "phablet":      560px,
        "tablet-small": 640px,
        "tablet":       768px,
        "tablet-wide":  1024px,
        "desktop":      1248px,
        "desktop-wide": 1440px
);
@mixin media-query($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

//Fixed aspect ratio
//@UseExample @include aspect-ratio(4, 3);
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .inner-box {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

//Text Shorten performs truncation on any text that overflows its containing element and adds an ellipsis (…) to the end.
//@UseExample @include text-shorten();
@mixin text-shorten {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

//Placeholders, @content allows us to pass a content block into a mixin.
//@UseExample @include input-placeholder { color: #333333; }
@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

//FlexBox Toolkit
@mixin custom-flex($align, $justify, $gap, $direction) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  gap: $gap;
  flex-direction: $direction;
  flex-wrap: wrap;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

@mixin flex-center-vert {
  display: flex;
  align-items: center;
}

@mixin flex-center-horiz {
  display: flex;
  justify-content: center;
}

//Z-index
//@useExample z-index: z-index(‘header’);
$z-indexes: (
        "modal",
        "sidebar",
        “header”
);

@function z-index($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name))+1;
  }
  @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

//Push Auto, quickly centre a block element
@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

//Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}

//Grid Toolkit
//@UseExample @include grid(repeat(2, 1fr))
@mixin grid($rows: null, $columns: null, $gap: null, $row-gap: null, $column-gap: null) {
  display: grid;
  gap: $gap;
  row-gap: $row-gap;
  column-gap: $column-gap;
  grid-template-rows: $rows;
  grid-template-columns: $columns;
}
